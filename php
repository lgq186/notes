1.php标记
	<?php 开头， 以 ?> 结尾

2.php指令分隔符
	php语句都必须以一个分号（；）结束

3.注释语句
	//单行注释
	#单行注释
	/*php的
	*多行注释
	*/

4.echo
	输出一个或多个字符串

5.标量数据类型
	String 字符串-一系列字符的组成
	Integer 整型-整数
	Float 浮点型-小数
	Boolean布尔类型-true、false

6.var_dump
	输出值和数据类型

7.PHP变量
	总是以一个美元符号（$）开头

8.变量命名规则
	以$开头，其后是变量名称
	变量名称必须以字母或下划线开头
	变量名称只能包含字母、下划线和数字
	变量名称大小写敏感

9.字符串函数
	trim()去空格
	strlen()获取字符串长度，不能正确处理中文字符串
	mb_strlen()获取字符串长度，能够正确处理中文字符串

10.复合数据类型
	Array数组
	Object对象

11.特殊数据类型
	Resource资源
	Null空

12.数组
	定义数组
		array()
		[]
	数组概念
		多个元素组成
		元素之间独立
		每个元素相当与一个变量
		每个元素是一个键值对(key=>value)
	数组元素的键(key)
		键不要求必须连续
		可以为整数或字符串
		需要唯一
	数组元素的值(value)
		可以是整数、浮点数、字符串、布尔型
		可以是数组
	数组输出
		数组按照向数组添加元素的顺序进行输出，而不是按照键的大小进行输出
		print_r()	//简洁的输出数组
	添加数组元素
		定义数组时添加
			array(value1,value2,...)/[value1,value2,...]
			array(key1=>value1,key2=>value2,...)/[key1=>value1,key2=>value2,...]
		定义数组后添加
			数组变量[] = value
			数组变量[key] = value
	修改数组元素值
		数组变量[key】 = new value
	删除数组元素
		unset(数组变量[key])
	获取数组元素值
		数组变量[key]
	遍历数组(无key)
		foreach(数组变量 as $value){
			处理数组元素 $value 的代码；
	}
	遍历数组(有key)
		foreach(array as $key => $value){
			处理数组元素$key和数组元素值$value的代码；
	}

13.多维数组
	数组元素的值是另一个数组

	二维数组里添加元素
		数组变量 [] = value
		数组变量 [key] = value
		数组变量 [key1][key2] = value
	修改二维数组元素值
		数组变量 [key] = new value
		数组变量 [key1][key2] = new value
	删除元素值
		unset(数组变量 [key] )
		unset(数组变量 [key1] [key2] )
	遍历二维数组(无key)
		foreach(array as $value){
		......
	}
	遍历二维数组(有key)
		foreach(array as $key => $value){
		......
	}

14.常量、状态函数
	常量分类
		自定义常量
		预定义常量
	自定义常量
		define(name,value,[FALSE/TRUE])
	常量
		一个简单值的名称，在脚本执行期间值不变
		大小写敏感，通常大写
		合法的常量名以字母或下划线开始，后面跟任何字母、数字或下划线
		常量值必须是标量数据类型数据或NULL
	预定义常量
		TRUE/FALSE:常量真值/假值
		NULL: 一个null值
		PHP_VERSION: PHP程序的版本
		PHP_OS:执行PHP解析器的操作系统名称
	检查常量是否定义
		defined('常量名称')
		返回值：true表明已定义
			   false表明未定义
	检测变量是否定义
		isset($变量名)
		返回值：true表明已定义
			    false表明未定义或值为null

15.运算符
	字符串连接运算符
		".":使用"."可以将两个字符串连接成一个字符串	
	赋值运算符
		"=":是将"="右边表达式的值赋给右边的变量
	算术运算符
		" + , - , * , / , % ":"加法"，"减法/取反"，"乘法"，"除法"，"取余"
	组合运算符
		"+= , -= , *= , /= , %= , .= "
	递增/递减运算符
		++$a : $a的值加1，然后返回$a
		$a++ : 返回$a,然后$a加1
		--$a : $a的值减1，然后返回$a
		$a-- : 返回$a,然后$a的值减1
	比较运算符
		== : 等于
		=== ：全等
		！= 、< > :不等
		！== ：非全等
		> : 大于
		< : 小于
		>= : 大于等于
		<= : 小于等于
	逻辑运算符
		&& 、 and : 逻辑与
		|| 、 or ： 逻辑或
		！ : 逻辑非
		xor ： 逻辑异或
	错误抑制运算符
		@ ： "@"运算符放置在PHP语句前，该语句产生的任何错误信息将不会输出
	条件运算符
		表达式1？表达式2：表达式3
		解释：如果表达式1的值为TRUE，则整个表达式的值为表达式2的值，否则为表达式3的值。

16.数据类型转换
	数据类型
		自动类型转换：PHP解析器自动执行
		强制类型转换：程序员手动执行
	自动类型转换规则
		1. 布尔型数据参与算术运算时：true转整数1，false转整数0
		2. NULL参与算术运算时，被转换成整数0
		3. 浮点数和整数算术运算，整数转浮点再运算
		4. 参与算术运算的字符串，只有以数字开头的字符串才会被认作数字，可转。否则被转0
		5. 字符串连接运算时，整数、浮点数转字符串再运算
		6. 逻辑运算时：
			空字符串' '、字符串'0'、整数0、浮点数0.0、NULL以及空数组将转换成布尔型FALSE
			其他的数据将转换成布尔型TRUE

17.检查数据类型
	is_bool : 检测变量或常量是否是布尔型
	is_string : 检测变量或常量是否是字符串型
	is_int : 检测变量或常量是否是整数
	is_integer : 检测变量或常量是否是整数
	is_long : 检测变量或常量是否是整数
	is_double : 检测变量或常量是否是浮点型
	is_float : 检测变量或常量是否是浮点型
	is_real : 检测变量或常量是否是浮点型
	is_numeric :检测变量或常量是否是数字或数字字符串
	is_scalar :检测变量或常量是否是标量数据类型
	is_array : 检测变量或常量是否是数组
	is_object : 检测变量或常量是否是一个对象
	is_recource : 检测变量或常量是否是资源类型

18.强制类型转换方式
	数据型：(int)\(bool)\(float)\(string)\(array)\(object)
	函数：intval()\floatval()\strval()
	settype(变量，数据类型)：改变变量本身的数据类型，数据类型取值有 "int", "float", "string" ,"array", "bool", "object","NULL"

19.流程控制语句
	条件控制结构1
		if(条件表达式){语句块1}
		if(条件表达式){语句块1}else{语句块2}
		if(条件表达式){语句块1}elseif(条件表达式2){语句块2}...
	条件控制结构2
		switch(表达式){
			case 值1：
				语句块1;
				break;
			case 值2：
				语句块2;
				break;
			...
			default:
				语句块n;
		}
	循环结构
		while(条件表达式){语句块}    //可能一次都不执行
		do{语句块}while(条件表达式)  //循环最少执行一次
		for(表达式1;条件表达式2;表达式3){语句块} 
	程序跳转和终止语句
		break：结束foreach、for、while、do-while或者switch结构的执行。
		continue：在循环结构里，用于跳出本次循环中剩余的代码并开始执行下一次循环。
		exit/die：输出一个消息并退出当前脚本。  //exit('提示内容')

20.函数
	自定义函数
	function 函数名($param1 , $param2 ,... ,$paramn=默认值){
		函数体
		return 返回值;
	}
	函数名($param1 , $param2 ,... ,$paramnValue);

21.变量作用域、global、static
	变量的作用域
		局部作用域
		全局作用域
		超全局作用域
	局部变量
		在用户自定义函数中，任何用于函数内部的变量默认被限制在局部函数内。
	全局变量
		函数外定义的变量
		函数内通过global关键字定义的变量
	超全局变量
		在全部作用域始终可用的内置变量。
		PS : $GLOBALS
	static关键字
		用于函数内声明一个静态变量。

22.