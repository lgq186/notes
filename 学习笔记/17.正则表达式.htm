
1.字符串操作
	indexOf			查找
	substring		获取子字符串
	charAt			获取某个字符
	split			分割字符串，获得数组

2.
	正则 : 也叫做规则，让计算机能够读懂人类的规则
	正则都是操作字符串的

3.正则的写法
	var re = /a/;
	var re = new RegExp('a');

4.test
	字符串判断
		返回真假
		正则.test(字符串)
		例子：是否有不是数字的字符

	test : 正则去匹配字符串，如果匹配成功就返回真，如果匹配失败就返回假
	test的写法 : 正则.test(字符串)

	var str = 'abcdef';
	var re = /b/;
	alert( re.test(str) );

5.转义字符

n \n
r \r
t \t

\s : 空格
\S : 非空格
\d : 数字
\D : 非数字
\w : 字符   ( 字母 ，数字，下划线_ )
\W : 非字符

6.search
	字符串搜索
		返回出现的位置
		字符串.search(正则)
		忽略大小写：i——ignore

	search : 正则去匹配字符串 , 如果匹配成功，就返回匹配成功的位置，如果匹配失败就返回 -1

	search的写法 : 字符串.search(正则)

	正则中的默认 : 是区分大小写的 

	如果不区分大小写的话，在正则的最后加标识 i 

	var str = 'abcdef';

	var re = /B/i;
	或
	var re = new RegExp('B','i');

	alert( str.search(re) );

7.match
	获取匹配的项目,
		返回数组
		量词：+
		全局匹配：g——global
		例子：找出所有数字

	match : 正则去匹配字符串，如果匹配成功，就返回匹配成功的数组，如果匹配不成功，就返回null

	match的写法 : 字符串.match(正则)

	正则默认：正则匹配成功就会结束，不会继续匹配 
	如果想全部查找，就要加标识 g(全局匹配)

	量词 : 匹配不确定的位置
	+ : 至少出现一次

	var str = 'haj123sdk54hask33dkhalsd879';

	var re = /\d+/g;

	alert( str.match(re) );   

8.replace
	替换所有匹配
	返回替换后的字符串
	字符串.replace(正则,想替换的)

	例子：敏感词过滤
	匹配子项
	例子：日期格式化

	replace : 正则去匹配字符串，匹配成功的字符去替换成新的字符串

	replace的写法 : 字符串.replace(正则,新的字符串)

	var str = 'aaa';
	var re = /a+/g;

	str = str.replace(re,'b');

	alert(str);

9.匹配子项
	匹配子项 : 小括号 ()  (还有另外一个意思，分组操作)

	1+1*2
	(1+1)*2

	把正则的整体叫做（母亲）
	然后把左边第一个小括号里面的正则，叫做这个第一个子项(母亲的第一个孩子)
	第二个小括号就是第二个孩子

	例：
	var str = '2013-6-7';

	var re = /(\d+)(-)/g;

	str = str.replace(re,function($0,$1,$2){
		//第一个参数：$0（母亲）,第二个参数 : $1(第一个孩子)
		//,第二个参数 : $1(第二个孩子)
		
		//alert( $2 );
		
		//return $1 + '.';
		或
		return $0.substring(0,$0.length-1) + '.';
		
	});

	alert( str );   //2013.6.7

	例：
	var str = 'abc';

	var re = /(a)(b)(c)/;

	alert( str.match(re) );  //[abc,a,b,c](当match不加g的时候才可以获取到子项的集合)


10.