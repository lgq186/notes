1.JavaScript由三部分组成
	ECMAScript(javaScript核心标准，也是一个解析器)；
	DOM (通过document提供的一些方法或者属性来操作页面)
	BOM (通过windows提供的一些方法或者属性来操作浏览器)

2.DOM => Document Object Model
		文档对象模型
		整个页面文档
	官方解释：是W3C组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM。
	简单来说：document提供了一些API(接口)；赋予开发者操作页面的能力

3.nodeType
	nodeType属性返回节点类型的常数值。不同的类型对应不同的常数值，12种类型分别对应1到12的常数值

	     元素节点            　　     Node.ELEMENT_NODE(1)
	     属性节点            　　     Node.ATTRIBUTE_NODE(2)
	     文本节点            　　     Node.TEXT_NODE(3)
	     CDATA节点                    Node.CDATA_SECTION_NODE(4)
	     实体引用名称节点    　   Node.ENTRY_REFERENCE_NODE(5)
	     实体名称节点        　　   Node.ENTITY_NODE(6)
	     处理指令节点        　　   Node.PROCESSING_INSTRUCTION_NODE(7)
	     注释节点            　         Node.COMMENT_NODE(8)
	     文档节点            　         Node.DOCUMENT_NODE(9)
	     文档类型节点        　　  Node.DOCUMENT_TYPE_NODE(10)
	     文档片段节点        　　  Node.DOCUMENT_FRAGMENT_NODE(11)
	     DTD声明节点                 Node.NOTATION_NODE(12)
	DOM定义了一个Node接口，这个接口在javascript中是作为Node类型实现的，而在IE8-浏览器中的所有DOM对象都是以COM对象的形式实现的。所以，IE8-浏览器并不支持Node对象的写法
	常用节点类型：元素节点、属性节点、文本节点、注释节点、文档节点

4.子节点
	childNode：查找某个元素的子节点
	children：不是标准的属性，但是所有浏览器都支持

5.父节点
	parentNode：查找某个元素的父节点

6.兄弟节点
	nextElementSibling：找到某个元素的下个兄弟节点
	previousElementSibling：找到某个元素的上个兄弟节点

7.第一个子节点，最后的子节点
	firstElementChild：找到某个元素的第一个子节点
	lastElementChild：找到某个元素的最后的子节点

8.DOM节点
	node.offsetParent
		offsetParent就是最近的有定位属性的祖先节点
		如果祖先节点都没有定位，那么默认为body
	node.offsetLeft/node.offsetTop
		offsetLeft/offsetTop就是最近的有定位属性的祖先节点的距离。
		外边框到定位父级的内边框的距离
		offsetLeft：左外边框到定位父级的左内边框的距离
		offsetTop：上外边框到定位父级的上内边框的距离
	node.getBoundingClientRect()
		获取元素的盒模型信息
		返回值为一个对象
			高版本：left top bottom right width height
			相对于浏览器可视区域

9.元素属性操作
	elem.getAttribute('key'):获取元素行间的属性
	elem.setAttribute('key','value'):设置元素的行间属性
	elem.removeAttribute('key'):删除元素的行间属性

	特点：
		可以操作行间自定义的属性
		可以获取src、href等的相对地址

10.元素宽高的获取
	elem.clientWidth /elem.clientHeight
		获取某个元素的宽高
		注意：不计算边框
			加上padding值
			不支持margin
	elem.offsetWidth / elem.offsetHeight
		获取某个元素的宽高
		注意：计算边框
			加上padding值
			不支持margin

11.可视区的宽高
	document.documentElement.clientWidth
	document.documentElement.clientHeight

12.元素的操作
	document.createElement('标签的名字'); 
		创建元素
	parentNode.appendChild(childNode)； 
		插入元素(向父级末尾添加一个元素)
	parentNode.insertBefore(childNode1,childNode2); 
		往一个节点的指定子节点（childNode2）前边插入一个节点（childNode1）
		特性：如果第二个参数为假的，那么会将某个元素添加到父元素的末位。
	
	parentNode.removeChild(childNodes);
		从一个节点中删除指定的子节点
		注意：如果指定的子节点没有，那么会报错。（进行判断解决）

	parentNode.replaceChild(node,childNode);
		node用来替换的节点，childNode被替换的子节点
		两个参数都必须写。

	node.cloneNode(boolean)
		克隆一个节点
		true：克隆元素和元素包含的子孙节点
		false：克隆元素但不包含元素的子孙节点
		注意：
			在克隆的时候，默认（false）只克隆指定元素本身，不会克隆该元素下的子孙节点。
			事件是不会克隆的

	注意：appendChild、insertBefore、replaceChild在操作一个已有的元素时，是将已有的元素移动，而不是复制一份进行操作。

13.操作表格
	table.tHead -->获取tHead
	table.tFoot -->获取表格底部
	table.tBodies -->获取表格主体
		获取到的是一个集合
	tBodies[n].rows/tHead.rows/tFoot.rows
		表格的行。就是tr
	rows[n].cells[n]
		单元格，就是td
