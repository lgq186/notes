DOM优化，快速排序，函数声明与表达式，操作iframe，枚举算法，事件委托，闭包，对象引用，JS中的跨域，firebug工具使用以及HTML5-history(历史管理)

1.DOM优化
	什么是DOM?
		用于操作XML和HTML文档的应用程序
			DOM节点
			DOM树
			DOM API
				getElementById
				childNodes
				appendChild
				innerHTML

	DOM与JavaScript
		浏览器会把dom与js独立实现
			像两个独立的小岛
		js操作dom
			从一个岛到另一个岛
		dom的性能
			岛与岛之间的桥，每次通过收取“过桥费”
			尽量减少过桥的次数
		innerHTML与dom方法对比
			chrome ： dom方法要比innerHTML 性能要好

	减少DOM操作
		节点克隆
			cloneNode
		访问元素集合
			尽量用局部变量
		元素节点
			尽量用只获取元素的节点方法
		选择API
			利用querySelector、querySelectorAll

	DOM与浏览器
		重排：改变页面的内容
		重汇：浏览器显示内容
		添加顺序
			尽量在appendchild前添加操作
		合并DOM操作
			利用cssText
		缓存布局信息
		文档碎片
			createDocumentFragment()

	DOM与事件
		事件委托
	DOM与前端模板
		能更好的对逻辑和视图分离，MVC架构的基础
		例：jQuery.tmpl()


2.快速排序
	1.找一个基准点
	2.建立两个数组，分别存储左边和右边的数组
	3.利用递归进行下次比较

	function quickSort(){
		if(arr.length <= 1){
			return arr;
		}

		var num = Math.floor(arr.length/2);
		var numValue = arr.splice(num,1);

		var left = [];
		var right = [];

		for(var i=0;i<arr.length;i++){
			if(arr[i]<numValue){
				left.push(arr[i]);
			}else{
				right.push(arr[i]);
			}
		}
		return quickSort(left).concat([numValue],quickSort(right));
	}

3.函数声明与表达式
	函数声明： function 函数名(){}
	函数表达式： function 函数名 （可写可不写）(){} : 命名函数表达式 匿名函数表达式

	function aaa (){}  : 函数声明

	var a = function aaa (){} : 命名函数表达式
	var a = function (){}  : 匿名函数表达式

	(function (){}) : 表达式
	~function (){} 
	-function (){}
	+function (){}
	！function (){}

	区别：
	1.函数表达式可以直接后面加括号执行，而函数声明是不可以的
	2.函数声明可以被提前解析出来的

例：
	function aaa(){ alert(1); }();   错误

	var a = function aaa(){ alert(1); }();  正确
	
	~function aaa(){ alert(1); }();正确

例：
	if(true){
		function aaa(){
			alert(1);
		}
	}
	else{
		function aaa(){
			alert(2);
		}
	}
	aaa(); //fixfox弹1 、IE低版本弹2

例：
	if(true){
		var a = function aaa(){
			alert(1);
		}
	}
	else{
		var a = function aaa(){
			alert(2);
		}
	}
	//aaa(); 在IE下可以用弹出2，在fixfox中会报错
	a(); 弹1

例：
	var a = function aaa(){
		alert(1);
		alert(typeof aaa);  //内部是可以找到的 function
	}

	a();

	aaa();  //外面是找不到的

例：
	(function aaa(){ alert(1) })

	aaa(); //报错

例：
	function aaa(){
		return bbb();
	}

	function bbb(){
		debugger;
	}

	aaa();


例：
	function aaa(){
		return bbb();
	}

	var bbb = (function bbb(){

		return function(){
			debugger;
		}
	})();

	aaa();

	匿名函数表达式debugger会有问题，建议用命名函数表达式

4.操作iframe
	见html+css+js/7.知识点


5.枚举算法

6.事件委托

	事件委托：利用冒泡的原理，把事件加到父级上，触发执行效果

	好处：
	1.提高性能
	2.新添加的元素，还会有之前的事件
	
	nodeName : 找到当前元素的标签名

7.闭包
	1.什么是闭包？
		函数嵌套函数，内部函数可以引用外部函数的参数和变量，参数和变量不会被垃圾回收机制收回

	2.闭包有什么好处？应用在哪里？
		希望一个变量长期驻扎在内存当中
		避免全局变量的污染
		私有成员的存在
			用法：
				模块化代码
				在循环中直接找到对应元素的索引

	3.闭包需要注意的地方？
		在ie下会引发内存泄漏

	例：js中的垃圾回收机制

	function aaa(){
		var a = 1;
	}

	aaa();

	例：闭包中参数和变量不会被垃圾回收机制收回
	function aaa(){
		var a = 1;
		function bbb(){
			alert(a);
		}
		return bbb;
	}

	var c = aaa();

	c();


	// 函数声明
	function aaa(){
		alert(1);
	}
	aaa();

	// 函数表达式，可以直接调用，可以不用函数名
	(function(){
		alert(1);
	})();

8.对象引用